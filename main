
# import types
from os import replace, write
from time import time
from telebot import types
from config import BOT_TOKEN
import logging
import telebot
import re
import psycopg2

import datetime

import time

teacher_for_english = {'Козак': [], 'Маркевич': [], 'Чуманевич': []}

holy_mans = [1116709501, 1121101135, 1129461474, 1086125120, 1330216224]

days = ["Понедельник","Вторник","Среда","Четверг","Пятница","Суббота"]

items = ['английский:', 'Козак', 'Маркевич', 'Чуманевич', 'астрономия', 'история беларуси', 'математика', 'физика', 'русский язык', 'химия', 'география', 'русская литература', 'белорусский язык', 'биология', 'общество', 'бел литература', 'ДПЮ', 'ОВК',]

from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, InputMedia, InputMediaPhoto, KeyboardButton, Message, Video

from huinia import *

c = False

conn = psycopg2.connect("dbname=d4ge5r8i47uiu0 user=lwmjifqsgemrke host=ec2-54-158-247-97.compute-1.amazonaws.com password=17574ccd733475aa99153007aa9711eeaac48a80204c8a66b7607c0cb70187a5 port=5432")
cur = conn.cursor()

admin_id = 1116709501 

# from telebot import types
bot = telebot.TeleBot(BOT_TOKEN)
logging.basicConfig(level=logging.INFO)


def deleter(message):
    # try:
        # if len(for_dop_delet()) > 0:
        #     print('asd')
        #     try:
        #         for dops in for_dop_delet():
        #             bot.delete_message(chat_id=message.from_user.id, message_id=dops)
        #             del for_dop_delet()[0]
        #     except: pass
            
        if len(for_home()) != 0:
            # del for_home()[:]
            for_home().clear()

        # if delet_photo():
        #     for ph in delet_photo():
        #         bot.delete_message(chat_id=message.from_user.id, message_id=ph)
        #     # del delet_photo()[:]
        #     delet_photo().clear()
        # print(users()[message.from_user.first_name])
        if users():
            if message.from_user.first_name in users().keys():
                if len(users()[message.from_user.first_name]) != 0:
                    for d in users()[message.from_user.first_name]:
                        print(d)
                        try:
                            bot.delete_message(chat_id=message.from_user.id, message_id=d)
                        except: pass
                        if len(users([message.from_user.first_name])) == 1:
                            return
                    users()[message.from_user.first_name].clear()
    # except: 
    #     bot.send_message(1116709501, f'ошибка при удалении у {message.from_user.first_name}')

def write_users(message):
    new_users(message)
    users()[message.from_user.first_name].clear()
    select = " SELECT user_name, id_3 FROM users "
    bot.send_message(admin_id, message.from_user.first_name)
    cur.execute(select)
    x = cur.fetchall()
    print(x)
    return x

@bot.message_handler(commands=['slovar_clear'])
def slovar_clear(message):
    schedule_sl().clear()
    homeworks().clear()
    bot.send_message(admin_id, 'ok')


@bot.message_handler(commands=['users'])
def useres(message):
    x = write_users(message)
    for i in x:
        bot.send_message(message.chat.id, f"{i[0]} - id {i[1]}")

@bot.message_handler(commands=['all'])
def all_homses(message):
    new_users(message)
    users()[message.from_user.first_name].clear()
    for i in items:
        insert = " SELECT homework FROM homework WHERE item = %s or item = %s "
        values = i, i
        cur.execute(insert, values)
        try:
            x = cur.fetchone()
        except:
            x = 'повторите попытку потом!'
        if x:
            bot.send_message(message.chat.id, f"{i} - {x[0]}")
    conn.commit()
    # conn.close()
    # cur.close()



@bot.message_handler(commands=["code"])
def print_code(message):
    new_users(message)
    users()[message.from_user.first_name].clear()
    keyboard = InlineKeyboardMarkup(row_width=3)
    kb = InlineKeyboardButton(text='Перейти', url='https://github.com/Odinson137/schedule/tree/main')
    keyboard.add(kb)
    bot.send_message(message.chat.id, 'Код бота schedule', reply_markup=keyboard)
    

# @bot.message_handler(commands=["write"])
# def writting(message):
#     bot.send_message(message.chat.id, 'Кому вы хотите написать:')


@bot.message_handler(commands=["affairs"])
def affairs(message):
    # if message.from_user.id in holy_mans:
        affairs_sl().clear()
        new_users(message)
        users()[message.from_user.first_name].clear()
        select = " SELECT affair FROM affairs "
        cur.execute(select)
        affairs = cur.fetchall()
        nums = 1
        for affair in affairs:
            print(affair)
            if message.from_user.id == admin_id:
                bot.send_message(message.chat.id, f"/{nums}) {affair[0]}")
                affairs_sl().update({'/' + str(nums): affair})
            else:
                bot.send_message(message.chat.id, f"{nums}) {affair[0]}")
            
            nums += 1
        print(affairs_sl())


def new_users(message):
    if message.from_user.first_name not in users().keys():
        if message.from_user.id != admin_id:
            bot.send_message(admin_id, f'New NOOB - {message.from_user.first_name}', disable_notification=True)
        users().update({message.from_user.first_name: []})
        # print(users()[message.from_user.first_name])
        print(users())

@bot.message_handler(commands=['date_update'])
def update_date(message, value_day='chisl'):
    if message.from_user.id == admin_id:
        if value_day == 'chisl':
            value_2 = 'znam'
        else:
            value_2 = 'chisl'
        today = datetime.date.today()

        nums = 0
        for i in days:
            tomorrow = today + datetime.timedelta(days=nums)
            update = " UPDATE schedule_day set date = %s WHERE day = %s and value = %s"
            value = tomorrow, i, value_day
            print(value)
            cur.execute(update, value)
            
            nums += 1

        nums = 7
        for i in days:
            tomorrow = today + datetime.timedelta(days=nums)
            update = " UPDATE schedule_day set date = %s WHERE day = %s and value = %s"
            value = tomorrow, i, value_2
            print(value)
            cur.execute(update, value)
            
            nums += 1
        bot.send_message(admin_id, 'Time is updating...')
        conn.commit()

@bot.message_handler(commands=['start'])
@bot.message_handler(commands=['schedule'])
def schedule(message):
        global c
        c = False
    # try:
        
        # deleter(message)

        new_users(message)
        users()[message.from_user.first_name].clear()

        try:
            if len(users()[message.from_user.first_name]) != 0:
                bot.delete_message(chat_id=message.from_user.id, message_id=users()[message.from_user.first_name][0])
                del users()[message.from_user.first_name][0]
        except: 
            print('error')
        print(message.from_user.first_name)
        try:
            select = " SELECT user_name FROM users WHERE user_name = %s and user_name = %s "
            value = message.from_user.first_name, message.from_user.first_name
            cur.execute(select, value)
            x = cur.fetchone()
            print(x)
            if not x:
                
                insert = " INSERT INTO users (user_name, id_3) VALUES (%s, %s)"
                values = message.from_user.first_name, message.chat.id
                cur.execute(insert, values)
                conn.commit()
        except: pass

        keyboard = InlineKeyboardMarkup(row_width=3)
        kb = InlineKeyboardButton(text='Числитель', callback_data='chisl')
        kb_1 = InlineKeyboardButton(text='Знаменатель', callback_data='znam')
        # keyboard.add(kb, kb_1)
        print(days)

        today = datetime.date.today()
        select = " SELECT (day, value) FROM schedule_day WHERE date = %s or date = %s "
        value = today, today
        cur.execute(select, value)

        x = cur.fetchone() 
        if x:
            val =  list(x[0].split(',')) 
        else:
            val = ['Воскресенье', 'ha']

            
        for day in days:
            if val[0][1:] == day:
                # val[0] = 'Понедельник'
                if val[1][:-1] == 'chisl':

                    kb_1 = InlineKeyboardButton(text='Today', callback_data=day + str(1))
                    kb_2 = InlineKeyboardButton(text=day, callback_data=day + str(2))
                # elif val[1][:-1] == 'znam':
                else:

                    kb_1 = InlineKeyboardButton(text=day, callback_data=day + str(1))
                    kb_2 = InlineKeyboardButton(text='Today', callback_data=day + str(2))        
            else:
                kb_1 = InlineKeyboardButton(text=day, callback_data=day + str(1))
                kb_2 = InlineKeyboardButton(text=day, callback_data=day + str(2))
            keyboard.add(kb_1, kb_2)

        delet = bot.send_message(message.chat.id, 'Расписание:', reply_markup=keyboard, disable_notification=True)
        # users()[message.from_user.first_name].append(delet.id)
        
        # if len(users()[message.from_user.first_name]) == 0:
        #     users()[message.from_user.first_name].append(x.id)
        print(users())
        # else:
        #     users()[message.from_user.first_name]

    # else:
    #     keyboard.add(kb_1, kb_2)

    # except: pass

@bot.callback_query_handler(func=lambda message: message.data[:-1] in days)
def days_(message):
        new_users(message)
        # deleter(message)
        global c
        c = False
    # try:
        # homeworks().clear()

        new_users(message)

        keyboard = InlineKeyboardMarkup(row_width=3)

        # markups = types.ReplyKeyboardRemove(selective=False)
        # print(id_chat()[0], for_delet())
        p = [1]
        # bot.send_message(1116709501, f"{message.data[:-1]}:", reply_markup=markup)
        
        if message.data not in schedule_sl().keys():
            schedule_sl().update({message.data: []})
            print(schedule_sl())
            print('atgtatatat')
            for num in range(1, 6):

                    select = " SELECT item_" +  str(num) + " FROM schedule_day WHERE day = %s and value = %s"
                    if str(1) in message.data:
                        p[0] = ('chisl')
                    if str(2) in message.data:
                        p[0] = 'znam'

                    value = message.data[:-1], p[-1]
                    cur.execute(select, value)

                    try:
                        x = cur.fetchone()
                        print(x)
                    except:
                        bot.send_message(admin_id, f'ошибка у {message.from_user.first_name}')
                        x = ['ничего']
    

                    # print(schedule_sl())
                    if x == None:
                        pass
                    else:
                        
                        x = x[0]

                        if x != None:
                            kb = InlineKeyboardButton(text=str(num) + ") " + x, callback_data=x)
                            if x == 'физра':
                                kb_2 = InlineKeyboardButton(text='как всегда', callback_data='ничего')
                                keyboard.add(kb, kb_2)
                                schedule_sl()[message.data].append(x)
                                homeworks().update({x: 'опять она... Достала'})
                            elif x == 'английский':
                                kb_2 = InlineKeyboardButton(text='тыкни на меня(кнопку)', callback_data='англ')
                                keyboard.add(kb, kb_2)
                                schedule_sl()[message.data].append(x)
                                homeworks().update({x: 'тыкни на меня'})
                            else:
                                select = " SELECT homework FROM homework WHERE item = %s or item = %s "
                                value = x, x
                                cur.execute(select, value)

                                try:
                                    home  = cur.fetchone()
                                except: home = ['ничегос']

                                schedule_sl()[message.data].append(x)

                                # homework_sl().update({x: home})

                                if home:
                                    home = home[0]
                                    kb_2 = InlineKeyboardButton(text=home, callback_data=x)

                                    keyboard.add(kb, kb_2)

                                    homeworks().update({x: home})

                                    select = " SELECT photo FROM homework WHERE item = %s or item = %s "

                                    value = x, x
                                    cur.execute(select, value)
                                    print(value)
                                    
                                    zet = cur.fetchone()[0]
                                    print('aghhh')
                                    
                                    if zet != None:
                                        photo_dop().update({x: zet})

                                    print(photo_dop())

                                    # schedule_sl()[message.data].update({x: home})

                                else:
                                    kb_2 = InlineKeyboardButton(text='ничего', callback_data='ничего')

                                    keyboard.add(kb, kb_2)
        
        elif message.data in schedule_sl().keys():
            for item in schedule_sl()[message.data]:
                print(item)
                # print(str(num) + '-' + item[0])
                print('AGGHGHH')
                print(schedule_sl())
                print(photo_dop())
                sc = schedule_sl()[message.data]
                print(sc)
                kb = InlineKeyboardButton(text=item, callback_data=item)
                # for item in schedule_sl()[message.data]:
                print('FFFFF')
                print(sc)
                if item == 'физра':
                    print('FIZRAAAAA')
                    kb_2 = InlineKeyboardButton(text='как всегда', callback_data='ничего')
                    keyboard.add(kb, kb_2)
                elif item == 'английский':
                    print('GGAGG')
                    kb_2 = InlineKeyboardButton(text='тыкни на меня(кнопку)', callback_data='англ')
                    keyboard.add(kb, kb_2)
                else:
                    # if message.data in photo_dop():
                    # photo_dop().update({message.data})
                    print(photo_dop())
                    print(homeworks())
                    print(homeworks()[item])
                    kb_2 = InlineKeyboardButton(text=homeworks()[item], callback_data=item)
                    keyboard.add(kb, kb_2)

                    # homeworks().update({item: homework})
        
        print(homeworks())
        print(message.data)
        print(message.message.id)

        print(schedule_sl())
        if users()[message.from_user.first_name]:
            if users()[message.from_user.first_name][0]:
                delet = bot.edit_message_text(chat_id=message.message.chat.id, message_id=users()[message.from_user.first_name][0], text=message.data[:-1], reply_markup=keyboard, parse_mode='Markdown')
                users()[message.from_user.first_name][0] = (delet.id)
        else:
            deleter(message)
            delet = bot.send_message(message.message.chat.id, f"{message.data[:-1]}", reply_markup=keyboard)
            users()[message.from_user.first_name].append(delet.id)



@bot.callback_query_handler(func=lambda message: message.data == 'англ')
def english(message):
    print('OOOOOPS')
    keyboard = InlineKeyboardMarkup(row_width=3)
    
    for teacher in teacher_for_english.keys():
        if message.data not in homeworks().keys(): 
            select = " SELECT homework FROM homework WHERE item = %s or item = %s "
            value = teacher, teacher
            cur.execute(select, value)
            home = cur.fetchone()
            kb = InlineKeyboardButton(text=teacher, callback_data=teacher)
            # keyboard.add(kb)
            print(home)
            homeworks().update({teacher: home})
        else:
            print(homeworks())
            kb = InlineKeyboardButton(text=teacher, callback_data=teacher)
        keyboard.add(kb)

    bot.send_message(message.message.chat.id, 'инглишменки', reply_markup=keyboard)
        



@bot.message_handler()
def homeworker(message):
    if message.from_user.id == admin_id:
        new_users(message)
        users()[message.from_user.first_name].clear()
        # print(message)
        # try:
        if message.text:
            if re.match(r'^\/\d+', message.text[0:2]):
                x = affairs_sl()[message.text[0:2]]
                update = " DELETE FROM affairs WHERE affair = %s or affair = %s"
                value = x, x
                cur.execute(update, value)
                conn.commit()

                bot.send_message(admin_id, 'Удалено:')
                bot.send_message(admin_id, x)
                del x
            else: 
                homeworker(message)
    else: homeworker(message)

# @bot.message_handler(content_types= ["photo"])
# def print_code(message):
#     bot.set_chat_photo(chat_id=message.chat.id, photo=message.id)

sp = []
@bot.message_handler(content_types= ["photo", "video", "document", "audio", "invoice", "voice"])
@bot.message_handler()
def homeworker(message):
    new_users(message)
    sp.append(message.id)
    sp.sort()
    # if len(sp) > 1:
    #     print(sp)
    #     bot.forward_message(admin_id, message.from_user.id, message_id=message.id, disable_notification=True)
    #     bot.forward_message(admin_id, message.from_user.id, message_id=message.id-1, disable_notification=True)
    #     bot.forward_message(admin_id, message.from_user.id, message_id=message.id-2, disable_notification=True)
        
    
    
    
    # print(message.id)

    # today = datetime.datetime.today()
    # print(today)

    # nums = 0
    # tomorrow = today + datetime.timedelta(day=1)
    # # print(tomorrow)
    # bot.send_message(admin_id, 'Hello', timeout=15)
    # sp.append(message.id)
    # media = [InputMediaPhoto(message.id, caption='Warring')]
    # bot.send_media_group(chat_id=message.chat.id, media=media)
    # media = [InputMediaPhoto(message)]
    # for m in sp:
    # media.append(InputMediaPhoto(message.id))
    # print(sp)
    # media = InputMediaPhoto()
    # media.ape
    # bot.send_photo(message.chat.id, photo=message.id)
    # bot.send_media_group(message.from_user.id, media)
    # if len(sp) > 1:

    # return
    
    if len(sp) == 1:
        try:
            if message.from_user.id == admin_id:
                new_users(message)
                users()[message.from_user.first_name].clear()
                if message.text:
                    if len(message.text) > 499:
                        bot.send_message(message.from_user.id, "Домашка слишком большая. Пиши меньше либо её нет")
                        return
                keyboard = InlineKeyboardMarkup(row_width=2)
                for i in items:
                    kb = InlineKeyboardButton(text=i, callback_data=i)
                    keyboard.add(kb)
                kb_1 = InlineKeyboardButton(text='вернуться назад', callback_data='return')
                kb_2 = InlineKeyboardButton(text='что-то важное', callback_data='affair')
                if message.from_user.id == admin_id:
                    kb_3 = InlineKeyboardButton(text='сообщение', callback_data='message')
                    keyboard.add(kb_1, kb_2, kb_3)
                else:
                    keyboard.add(kb_1, kb_2)
                # if message.text:
                delet = bot.send_message(message.chat.id, 'Выберите предмет: ', reply_markup=keyboard)
                # new_users(message)
                
                # bot.forward_message(admin_id, message.from_user.id, message_id=message.id)
                users()[message.from_user.first_name].append(delet.id)
                # for_delet().append(delet.message_id)
                if message.text:
                    for_text().append(message.text)
                else:
                    id_photo().append(sp[0])
                global c
                c = True
                sp.clear()

            else:
                bot.send_message(message.chat.id, 'отправлено!')
                bot.send_message(admin_id, f'Новое сообщение от {message.from_user.first_name}:')
                if message.text:
                    bot.send_message(admin_id, message.text)
                else:
                    bot.forward_message(admin_id, message.from_user.id, message_id=message.id, disable_notification=True)
                sp.clear()

        except: 
            sp.clear()
            bot.send_message(admin_id, 'Error')

        # except: print('error')

@bot.callback_query_handler(func=lambda message: message.data == 'message')
def ready_message(message):
    bot.delete_message(chat_id=message.from_user.id, message_id=users()[message.from_user.first_name][0])
    del users()[message.from_user.first_name][0]

    keyboard = InlineKeyboardMarkup(row_width=2)
    x = write_users(message)
    holy = {'Егор': 1086125120, 'Люба': 1121101135, 'Саша': 1129461474, 'Маша': 1330216224, 'Диана': 898333881}
    # for i in holy:
    for i in x:
        # writer_mod().update({i[1]: })
        print(i[0], " - ", i[1])
        kb = InlineKeyboardButton(text=i[0], callback_data="*-*"+str(int(i[1])))
        keyboard.add(kb)
    kb = InlineKeyboardButton(text="Отмена", callback_data='return')
    keyboard.add(kb)
    delet = bot.send_message(message.from_user.id, f"Кому отправить сообщение:", reply_markup=keyboard)
    users()[message.from_user.first_name].append(delet.id)
    sp.clear()


@bot.callback_query_handler(func=lambda message: message.data[0:3] == '*-*')
def write_message(message):
    print(for_text()[0])
    bot.send_message(message.data[3:], for_text()[0])
    bot.delete_message(chat_id=message.from_user.id, message_id=users()[message.from_user.first_name][0])
    del users()[message.from_user.first_name][0]
    bot.send_message(message.from_user.id, 'Отправлено')
    

@bot.callback_query_handler(func=lambda message: message.data == 'affair')
def get_affair(message):
    print(affairs_sl())
    insert = " INSERT INTO affairs (affair) VALUES ('" + for_text()[0] + "') "
    cur.execute(insert)
    conn.commit()
    try:
        bot.delete_message(chat_id=message.from_user.id, message_id=users()[message.from_user.first_name][0])
    except:
        bot.send_message(admin_id, 'Error')
    bot.send_message(message.from_user.id, f"Добавлено в важные '{for_text()[0]}'")
    for_text().clear()


@bot.callback_query_handler(func=lambda message: message.data == 'return')
def returs(message):
    try:
        bot.delete_message(chat_id=message.from_user.id, message_id=users()[message.from_user.first_name][0])

    # del for_text()[0]
        for_text().clear()
        # del for_delet()[0]

        users()[message.from_user.first_name].clear()

    except:
        bot.send_message(message.from_user.id, 'Время вышло')
    # for_delet().clear()
    global c
    c = False


@bot.callback_query_handler(func=lambda message: message.data in photo_dop().keys() and c == False)
def photo_dop_home(message):
        print(photo_dop().keys())
        print('agg')
        print(photo_dop())
        keyboard = InlineKeyboardMarkup(row_width=2)
                # print(sp)
        # try:
        nums = 0
        print(photo_dop()[message.data])
        while True:
                try:
                    
                    x = bot.forward_message(message.from_user.id, from_chat_id=admin_id, message_id=photo_dop()[message.data]+nums, disable_notification=True)
                    nums += 1
                except: break

            # bot.forward_message(admin_id, message.from_user.id, message_id=message.id, disable_notification=True)
            # bot.forward_message(admin_id, message.from_user.id, message_id=message.id+1, disable_notification=True)
            # bot.forward_message(admin_id, message.from_user.id, message_id=message.id+2, disable_notification=True)
            # bot.forward_message(admin_id, message.from_user.id, message_id=message.id+2, disable_notification=True)
        # except:
        #     pass
    # try:
        delet = bot.forward_message(message.from_user.id, admin_id, message_id=photo_dop()[message.data])
        users()[message.from_user.first_name].append(x.id)
        kb = InlineKeyboardButton(text='Удалить!', callback_data='deleter-'+str(photo_dop()[message.data]))
        keyboard.add(kb)

        if message.from_user.id == admin_id:
            delet_2 = bot.send_message(holy_mans[0], 'DELET PHOTO!', reply_markup=keyboard)
            new_users(message)
            # users()[message.from_user.first_name].append(delet.id)
            users()[message.from_user.first_name].append(delet_2.id)
            # photo_dop().clear()
            

            # dop_delet().append(delet.id)
        
        delet = bot.send_message(message.from_user.id, homeworks()[message.data])
        # users()[message.from_user.first_name].append(delet.id)
        
        # photo_dop().clear()
    # except:
    #     bot.send_message(1116709501, f'Ошибка при отправке фотки у {message.from_user.first_name}')

@bot.callback_query_handler(func=lambda message: 'deleter' in message.data)
def deleter_photo_dz(message):
    update = " UPDATE homework set photo = %s WHERE photo = %s "
    value = None, message.data[8:] 
    cur.execute(update, value)
    conn.commit()
    delet = bot.send_message(admin_id, 'Удалено')
    new_users(message)
    users()[message.from_user.first_name].append(delet.id)
    slovar_clear(message)
    photo_dop().clear()


@bot.callback_query_handler(func=lambda message: message.data in homeworks().keys() and c == False)
def home_podrob(message):
    print(homeworks())
    delet = bot.send_message(message.from_user.id, homeworks()[message.data])
    new_users(message)
    # users()[message.from_user.first_name].append(delet.id)

    # dop_delet().append(delet.id)
    



@bot.callback_query_handler(func=lambda message: message.data in items and c == True)
def homeworke(message):
    print(message)
    print(message.data)
    # delete_message()
    # users()[message.from_user.first_name].clear()
    print(users())
    # if users()[message.from_user.first_name]:
    # try:
    bot.delete_message(chat_id=message.from_user.id, message_id=users()[message.from_user.first_name][0])
    # except: pass
    users()[message.from_user.first_name].clear()
    markup = types.ReplyKeyboardMarkup(resize_keyboard=1)
    item_schedule = types.KeyboardButton('/schedule')
    markup.add(item_schedule)
    if id_photo():
        update = " UPDATE homework set photo = %s WHERE item = %s "
        value = id_photo()[0], message.data
        bot.send_message(message.from_user.id, f"Фото для предмета '{message.data.title()}' добавлено в дневник")
        print(id_photo())
        del id_photo()[0]
    elif for_text():
        update = " UPDATE homework set homework = %s WHERE item = %s "
        value = for_text()[0], message.data
        homeworks()[message.data] = for_text()[0]
        x = bot.send_message(message.from_user.id, f"Задание '{for_text()[0]}' по предмету'{message.data.title()}' добавлено в дневник")
        bot.pin_chat_message(chat_id=message.message.chat.id, message_id=x.id)
        del for_text()[0]
    
    slovar_clear(message)
    cur.execute(update, value)
    conn.commit()


    global c
    c = False



while True:
    try:
        bot.polling(none_stop=False
    except:
        bot.send_message(admin_id, 'BIG ERROR')
        time.sleep(1)
        slovar_clear(1)
